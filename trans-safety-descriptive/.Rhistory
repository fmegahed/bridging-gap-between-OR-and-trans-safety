ggplot(data = plot.df, aes(x = Hour, y = "Traffic Flow", group=cluster.num)) +
geom_line(color=red)
ggplot(data = plot.df, aes(x = Hour, y = "Traffic Flow", group=cluster.num)) +
geom_line(color="red")
View(plot.df)
plot.df <- melt(plot.df, value.name="Traffic.Flow",
variable.name="Hour",id.vars="cluster.num")
plot.df <- subset(summary.df, select = -c(2:4))
plot.df <- melt(plot.df, value.name="Traffic.Flow",
variable.name="Hour",id.vars="cluster.num")
View(plot.df)
ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num)) +
geom_line(color="red")
ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num))
ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
group=cluster.num))
marker = list(color = brewer.pal(nrow(summary.df), "Paired"))
ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
group=cluster.num))
ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num))
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p
plot.df$cluster.num <- as.factor(plot.df$cluster.num)
marker = list(color = brewer.pal(nrow(summary.df), "Paired"))
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
p + theme(legend.position="top")
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
p + theme(legend.position="top")
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p + theme(legend.position="top")
p + theme(legend.position="top") + coord_flip()
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1))
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_brewer(palette="Paired")
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_brewer(palette="Set3")
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_brewer(palette="Set3")
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1))
p + scale_fill_brewer(palette="Set3")
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Paired")
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Set3")
p_load(data.table,bibliometrix,rvest,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
p <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2)
p + theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2") + theme_tufte()
p + theme_tufte(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p + theme_tufte() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p + theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
+ theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p1
p_load(data.table,bibliometrix,rvest,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,ggcal,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
View(trafficflow.df)
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p_load(data.table,bibliometrix,rvest,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,ggcal,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
p_load(data.table,devtools,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
# Installing the GG Calendar Package from Github
install_github("jayjacobs/ggcal")
library(ggcal)
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p2
trafficflow.df$cluster.num <- as.vector(pr) %>% as.factor()
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p2
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p2
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(palette="Dark2")
p2
colors <- brewer.pal(11, Paired)
col.brewer.pal <- brewer.pal(11, "Paired")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(col.brewer.pal[1:2])
p1
col.brewer.pal[1:2]
col.brewer.pal <- brewer.pal(11, "Paired")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(col.brewer.pal[1],col.brewer.pal[2])
p1
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p1
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer(palette="Dark2")
p2
col.brewer.pal <- brewer.pal(11, Paired)
col.brewer.pal <- brewer.pal(11, "Paired")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p1
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c(1=col.brewer.pal[1], 2=col.brewer.pal[2]))
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
col.brewer.pal <- brewer.pal(11, "Paired")
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p1
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
?scale_color_brewer()
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer("Paired")
p1
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
# This code attempts to replicate the visual clustering approach from
# Van Wijk, Jarke J., and Edward R. Van Selow. 1999. “Cluster and Calendar Based Visualization of Time Series Data.” In Information Visualization, 1999.(Info Vis’ 99) Proceedings. 1999 IEEE Symposium on, 4–9. IEEE.
# Cleaning screen and global environment
cat("\014")
rm(list=ls())
graphics.off()
# Installing/loading relevant packages
library(pacman) # install.packages("pacman") if not on machine
p_load(data.table,devtools,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
# automatically getting the file's wd using rstudio api
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only tested in
# Installing the GG Calendar Package from Github
install_github("jayjacobs/ggcal")
library(ggcal)
#_______________________Loading the Data_____________________________
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%d-%b')
#________________________ Finding the Optimal Number of Clusters__________
# Ref: https://cran.r-project.org/web/packages/ClusterR/vignettes/the_clusterR_package.html
opt = Optimal_Clusters_KMeans(as.data.frame(trafficflow.df[,4:27]), max_clusters = 10, plot_clusters = T,
criterion = 'distortion_fK', fK_threshold = 0.85,
initializer = 'optimal_init', tol_optimal_init = 0.2,
max_iters = 10000)
num_clusters <- which.min(opt) # Based on the results, we should use k=2 clusters in kmeans
km = KMeans_arma(as.data.frame(trafficflow.df[,4:27]), clusters = num_clusters, n_iter = 10000, seed_mode = "random_subset",
verbose = T, CENTROIDS = NULL)
pr = predict_KMeans(data.frame(trafficflow.df[,4:27]), km)
trafficflow.df$cluster.num <- as.vector(pr) %>% as.factor()
table(trafficflow.df$cluster.num)
summary.df <- group_by(trafficflow.df,cluster.num)
summary.df <- summarise_all(summary.df,funs(mean))
plot.df <- subset(summary.df, select = -c(2:4))
plot.df <- melt(plot.df, value.name="Traffic.Flow",
variable.name="Hour",id.vars="cluster.num")
plot.df$cluster.num <- as.factor(plot.df$cluster.num)
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer("Paired")
p1
col.brewer.pal <- brewer.pal(11, "Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
col.brewer.pal <- brewer.pal(11, "Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_brewer(pallette="Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2])) +
facet_grid(cluster.num ~ .)
p2
col.brewer.pal <- brewer.pal(11, "Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
col.brewer.pal <- brewer.pal(11, "Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme_bw() +
theme(legend.position="top") +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme(legend.position="top") +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
# This code attempts to replicate the visual clustering approach from
# Van Wijk, Jarke J., and Edward R. Van Selow. 1999. “Cluster and Calendar Based Visualization of Time Series Data.” In Information Visualization, 1999.(Info Vis’ 99) Proceedings. 1999 IEEE Symposium on, 4–9. IEEE.
# Cleaning screen and global environment
cat("\014")
rm(list=ls())
graphics.off()
# Installing/loading relevant packages
library(pacman) # install.packages("pacman") if not on machine
p_load(data.table,devtools,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
# automatically getting the file's wd using rstudio api
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only tested in
# Installing the GG Calendar Package from Github
install_github("jayjacobs/ggcal")
library(ggcal)
#_______________________Loading the Data_____________________________
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%d-%b')
#________________________ Finding the Optimal Number of Clusters__________
# Ref: https://cran.r-project.org/web/packages/ClusterR/vignettes/the_clusterR_package.html
opt = Optimal_Clusters_KMeans(as.data.frame(trafficflow.df[,4:27]), max_clusters = 10, plot_clusters = T,
criterion = 'distortion_fK', fK_threshold = 0.85,
initializer = 'optimal_init', tol_optimal_init = 0.2,
max_iters = 10000)
num_clusters <- which.min(opt) # Based on the results, we should use k=2 clusters in kmeans
km = KMeans_arma(as.data.frame(trafficflow.df[,4:27]), clusters = num_clusters, n_iter = 10000, seed_mode = "random_subset",
verbose = T, CENTROIDS = NULL)
pr = predict_KMeans(data.frame(trafficflow.df[,4:27]), km)
trafficflow.df$cluster.num <- as.vector(pr) %>% as.factor()
table(trafficflow.df$cluster.num)
summary.df <- group_by(trafficflow.df,cluster.num)
summary.df <- summarise_all(summary.df,funs(mean))
plot.df <- subset(summary.df, select = -c(2:4))
plot.df <- melt(plot.df, value.name="Traffic.Flow",
variable.name="Hour",id.vars="cluster.num")
plot.df$cluster.num <- as.factor(plot.df$cluster.num)
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer("Paired")
p1
col.brewer.pal <- brewer.pal(11, "Paired")
p2 <- ggcal(trafficflow.df$Date,trafficflow.df$cluster.num) +
theme(legend.position="top") +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
mydate <- seq(as.Date("2015-01-01"), as.Date("2015-12-31"), by="1 day")
p2 <- ggcal(mydate,trafficflow.df$cluster.num) +
theme(legend.position="top") +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
library(pacman)
p_load(forcast, ggplot2, devtools)
p_load(forecast, ggplot2, devtools)
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
p_load(forecast, ggplot2, devtools, extrafont)
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
p_load(forecast, ggplot2, devtools, extrafont, readr)
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%d-%b')
View(trafficflow.df)
trafficflow.df$Total <- apply(a[,c(4:27)], 1, sum)
?apply
trafficflow.df$Total <- apply(trafficflow.df[,c(4:27)], 2, sum)
?cols
?colSums
trafficflow.df$Total <- colSums(trafficflow.df[,c(4:27)], 2, sum)
View(trafficflow.df)
trafficflow.df$Total <- colSums(trafficflow.df[,c(4:27)])
trafficflow.df$Total <- rowSums(trafficflow.df[,c(4:27)])
View(trafficflow.df)
View(trafficflow.df)
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%d-%b')
View(trafficflow.df)
# Cleaning screen and global environment
cat("\014")
rm(list=ls())
graphics.off()
library(pacman)
p_load(forecast, ggplot2, devtools, extrafont, readr)
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%m/%m/%y')
View(trafficflow.df)
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
View(trafficflow.df)
class(trafficflow.df$Date)
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%m/%d/%y')
View(trafficflow.df)
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
View(trafficflow.df)
trafficflow.df$Date <- as.Date(trafficflow.df$Date)
View(trafficflow.df)
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
class(trafficflow.df$Date)
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%m/%d/%Y')
View(trafficflow.df)
trafficflow.df$Total <- rowSums(trafficflow.df[,c(4:27)])
t.df <- trafficflow.df[,c(1, 28)]
p_load(forecast, ggplot2, devtools, extrafont, readr, tseries)
?auto.arima
fit <- auto.arima(t.df)
t.df <- trafficflow.df[,c(1, 28)] %>% ts() # creating a df w/ only date and total
fit <- auto.arima(t.df)
View(t.df)
t.df <- trafficflow.df[,c(1, 28)] # creating a df w/ only date and total
total.ts <- trafficflow.df[, 28] %>% ts() # creating a df w/ only date and total
fit <- auto.arima(t.df)
# creating a univariate time series for total
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1] )
head(total.ts)
# Fitting the ARIMA
fit <- auto.arima(total.ts )
tsdisplay(fit)
tsdisplay(residuals(fit))
# Fitting the ARIMA
fit <- auto.arima(total.ts, order=c(1,1,7))
# Fitting the ARIMA
fit <- arima(total.ts, order=c(1,1,7))
tsdisplay(residuals(fit))
# Fitting the ARIMA
fit <- arima(total.ts, order=c(1,1,7))
tsdisplay(residuals(fit))
# Fitting the ARIMA
fit <- auto.arima(total.ts)
tsdisplay(residuals(fit))
# Fitting the ARIMA
fit <- auto.arima(total.ts, ic = "aicc", biasadj = TRUE, trace = TRUE)
tsdisplay(residuals(fit))
# Fitting the ARIMA
components.ts < decompose(total.ts)
# Fitting the ARIMA
components.ts <- decompose(total.ts)
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1])
?ts
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
frequency = 1)
# Fitting the ARIMA
components.ts <- decompose(total.ts)
fit <- auto.arima(total.ts, ic = "aicc", biasadj = TRUE, trace = TRUE)
fit <- auto.arima(total.ts, ic = "bic", biasadj = TRUE, trace = TRUE)
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
frequency = 365)
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
frequency = 1)
head(total.ts)
summary(total.ts)
fit <- auto.arima(total.ts, ic = "bic", biasadj = TRUE, trace = TRUE)
tsdisplay(residuals(fit))
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
ts.plot(total.ts)                                        frequency = 1)
ts.plot(total.ts)
?stl
decomp <- stl(total.ts, s.window = "periodic")
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
frequency = 1)
decomp <- stl(total.ts, s.window = "periodic")
total.ts <- trafficflow.df[, 28] %>% ts(start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365])
decomp <- stl(total.ts, s.window = "periodic")
total.ts <- ts(trafficflow.df$Total[1:365])
total.ts <- ts(trafficflow.df$Total[1:365], start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365])
total.ts <- ts(trafficflow.df$Total[1:365], start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365])
decomp <- stl(total.ts, s.window = "periodic")
decomp <- stl(total.ts, s.window = 30)
total.ts <- ts(trafficflow.df$Total[1:365], start = trafficflow.df$Date[1],
end= trafficflow.df$Date[365],
frequency = 1)
decomp <- stl(total.ts, s.window = 30)
decomp <- stl(total.ts, s.window = 7)
decomp <- stl(total.ts, s.window = 1)
# Installing/loading relevant packages
library(pacman) # install.packages("pacman") if not on machine
p_load(data.table,devtools,
ggplot2,plotly,extrafont,grDevices,RColorBrewer, ggthemes,
dplyr, stringr,tidyverse,readr,
rstudioapi,processx,
ClusterR) # Assuming R Studio is the IDE
# automatically getting the file's wd using rstudio api
loadfonts(device = "win") # To use specific fonts for windows
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only tested in
library(ggcal)
#_______________________Loading the Data_____________________________
trafficflow.df <- read_csv("georgia-TFdata-station-121-5505-Yr2015.csv")
trafficflow.df$Date <- as.Date(trafficflow.df$Date, format='%d-%b')
opt = Optimal_Clusters_KMeans(as.data.frame(trafficflow.df[,4:27]), max_clusters = 10, plot_clusters = T,
criterion = 'distortion_fK', fK_threshold = 0.85,
initializer = 'optimal_init', tol_optimal_init = 0.2,
max_iters = 10000)
num_clusters <- which.min(opt) # Based on the results, we should use k=2 clusters in kmeans
km = KMeans_arma(as.data.frame(trafficflow.df[,4:27]), clusters = num_clusters, n_iter = 10000, seed_mode = "random_subset",
verbose = T, CENTROIDS = NULL)
pr = predict_KMeans(data.frame(trafficflow.df[,4:27]), km)
trafficflow.df$cluster.num <- as.vector(pr) %>% as.factor()
table(trafficflow.df$cluster.num)
summary.df <- group_by(trafficflow.df,cluster.num)
summary.df <- summarise_all(summary.df,funs(mean))
plot.df <- subset(summary.df, select = -c(2:4))
plot.df <- melt(plot.df, value.name="Traffic.Flow",
variable.name="Hour",id.vars="cluster.num")
plot.df$cluster.num <- as.factor(plot.df$cluster.num)
p1 <- ggplot(data = plot.df, aes(x = Hour, y = Traffic.Flow, group=cluster.num,
color=cluster.num)) + geom_line(size=2) +
theme_bw() +
theme(legend.position="top", axis.text.x=element_text(angle=90, hjust=1)) +
scale_color_brewer("Paired")
p1
col.brewer.pal <- brewer.pal(11, "Paired")
mydate <- seq(as.Date("2015-01-01"), as.Date("2015-12-31"), by="1 day")
p2 <- ggcal(mydate,trafficflow.df$cluster.num) +
theme(legend.position="top") +
scale_fill_manual(values = c("1"=col.brewer.pal[1], "2"=col.brewer.pal[2]))
p2
